#!/bin/sh
#
# Author: Yuri <nE0sIghT> Konotopov
# License: GNU GPL v3 or any later version
#

source /lib/gentoo/functions.sh
source /usr/$(get_libdir)/vortex-build/vortex-functions.sh

CONFIG=/etc/default/vortex-build

if [ -f "${CONFIG}" ]; then
	einfo Using configuration file "${CONFIG}"
	source "${CONFIG}"
fi

BOOT_PARTITION=${BOOT_PARTITION:-/boot/efi}
BUILD_PATH=${BUILD_PATH:-/usr/src/linux-build}
KERNEL_PATH=${KERNEL_PATH:-/efi/gentoo}
KERNEL_SUFFIX=${KERNEL_SUFFIX:-.efi}
CPU_AUTODETECT=${CPU_AUTODETECT:-1}

if [ "${CPU_AUTODETECT}" -eq "1" -a -f /proc/cpuinfo ]; then
	cpus=$(grep processor /proc/cpuinfo | wc -l)
	einfo "Auto detected ${cpus} CPUs"

	MAKEOPTS=${MAKEOPTS:--j$(($cpus + 1))}
fi

export BUILD_PATH
prepare_kernel
if [ $? -ne 0 ]; then
	eerror "Preparation failed"
	exit 1
fi

mountpoint -q "${BOOT_PARTITION}"
boot_mounted=$?
if [ $boot_mounted != 0 ]; then
	ebegin "Mounting ${BOOT_PARTITION}"
	mount "${BOOT_PARTITION}"
	eend $?
fi

pushd /usr/src/linux > /dev/null

ebegin "Building kernel"
make "${MAKEOPTS}" O="${BUILD_PATH}"
exit_code=$?
eend $exit_code

if [ $exit_code -eq 0 ]; then
	ebegin "Installing kernel modules"

	make "${MAKEOPTS}" O="${BUILD_PATH}" modules_install

	exit_code=$?
	eend $exit_code
fi

if [ $exit_code -eq 0 ]; then
	ebegin "Installing kernel"

	if [ "${KERNEL_ONE_NAME}" -eq "1" ]; then
		kernel_image="${BOOT_PARTITION}${KERNEL_PATH}"/kernel"${KERNEL_SUFFIX}"
		if [ -f "${kernel_image}" ]; then
			mv "${kernel_image}" "${BOOT_PARTITION}${KERNEL_PATH}"/kernel-$(uname -r)"${KERNEL_SUFFIX}"
		fi
	else
		kernel_image="${BOOT_PARTITION}${KERNEL_PATH}"/kernel-$(get_current_kernel_version)"${KERNEL_SUFFIX}"
		if [ -f "${kernel_image}" ]; then
			mv "${kernel_image}" "${kernel_image}".$(date +%Y%m%d%H%M%S)
		fi
	fi

	cp "${BUILD_PATH}"/arch/x86/boot/bzImage "${kernel_image}"

	exit_code=$?
	eend $exit_code

	if [ $exit_code -ne 0 ]; then
		eerror
		eerror "Due to some error kernel image was NOT installed."
		eerror "You MUST review kernel images or your system may became unbootable."
		eerror
	fi
fi

popd > /dev/null

if [ $boot_mounted != 0 ]; then
	ebegin "Unmounting ${BOOT_PARTITION}"
	umount "${BOOT_PARTITION}"
	eend $?
fi

if [ $exit_code -eq 0 ]; then
	ebegin "Rebuilding 3rd party kernel modules"
	emerge @module-rebuild
	exit_code=$?
	eend $exit_code
fi

exit $exit_code
