From 1a62be630ac2cd9bd1f4df3229e5ecb939696921 Mon Sep 17 00:00:00 2001
From: nE0sIghT <ykonotopov@gmail.com>
Date: Sat, 8 Aug 2015 23:34:35 +0300
Subject: [PATCH] Replaced generic EXTRA_PLUGINS cmake option with individual
 plugins options. Make cmake explicitly fail if some dependency of requested
 component missing.

---
 build.sh                       |  12 ++-
 cmake/BuildParameters.cmake    |  25 +++++-
 cmake/SearchForStuff.cmake     |   6 +-
 cmake/SelectPcsx2Plugins.cmake | 175 ++++++++++++++++++++++-------------------
 4 files changed, 134 insertions(+), 84 deletions(-)

diff --git a/build.sh b/build.sh
index 38756f0..990bec3 100755
--- a/build.sh
+++ b/build.sh
@@ -17,6 +17,16 @@
 #set -e # This terminates the script in case of any error
 
 flags=(-DCMAKE_BUILD_PO=FALSE)
+extra_plugins=(
+    CDVDISO
+    CDVDLINUZ
+    ZEROGS
+    ZZOGL-PG
+    ZEROSPU2
+    GSNULL
+    PADNULL
+    SPU2NULL
+)
 
 cleanBuild=0
 useClang=0
@@ -34,7 +44,7 @@ for ARG in "$@"; do
         --glsl              ) flags+=(-DGLSL_API=TRUE) ;;
         --egl               ) flags+=(-DEGL_API=TRUE) ;;
         --sdl2              ) flags+=(-DSDL2_API=TRUE) ;;
-        --extra             ) flags+=(-DEXTRA_PLUGINS=TRUE) ;;
+        --extra             ) for plugin in ${extra_plugins[@]}; do flags+=(-DBUILD_${plugin}=TRUE); done ;;
         --asan              ) flags+=(-DUSE_ASAN=TRUE) ;;
         --wx28              ) flags+=(-DWX28_API=TRUE) ;;
         --gtk3              ) flags+=(-DGTK3_API=TRUE) ;;
diff --git a/cmake/BuildParameters.cmake b/cmake/BuildParameters.cmake
index d9f12b0..2b9bd58 100644
--- a/cmake/BuildParameters.cmake
+++ b/cmake/BuildParameters.cmake
@@ -37,13 +37,36 @@ option(REBUILD_SHADER "Rebuild GLSL/CG shader (developer option)")
 option(BUILD_REPLAY_LOADERS "Build GS replayer to ease testing (developer option)")
 
 #-------------------------------------------------------------------------------
+# Build options
+#-------------------------------------------------------------------------------
+option(BUILD_CORE	"Build PCSX2 core"		TRUE)
+option(BUILD_GSDX	"Build GSdx plugin"		TRUE)
+option(BUILD_ONEPAD	"Build onepad plugin"		TRUE)
+option(BUILD_LILYPAD	"Build LilyPad plugin"		TRUE)
+option(BUILD_SPU2-X	"Build spu2-x plugin"		TRUE)
+
+option(BUILD_CDVDISO	"Build CDVDiso plugin"		FALSE)
+option(BUILD_CDVDLINUZ	"Build CDVDlinuz plugin"	FALSE)
+option(BUILD_ZEROGS	"Build zerogs plugin"		FALSE)
+option(BUILD_ZZOGL-PG	"Build zzogl-pg plugin"		FALSE)
+option(BUILD_ZEROSPU2	"Build zerospu2 plugin"		FALSE)
+
+option(BUILD_CDVDNULL	"Build CDVDnull plugin"		TRUE)
+option(BUILD_DEV9NULL	"Build dev9null plugin"		TRUE)
+option(BUILD_FWNULL	"Build fwnull plugin"		TRUE)
+option(BUILD_USBNULL	"Build USBnull plugin"		TRUE)
+
+option(BUILD_GSNULL	"Build GSnull plugin"		FALSE)
+option(BUILD_PADNULL	"Build PadNull plugin"		FALSE)
+option(BUILD_SPU2NULL	"Build SPU2null plugin"		FALSE)
+
+#-------------------------------------------------------------------------------
 # Path and lib option
 #-------------------------------------------------------------------------------
 option(PACKAGE_MODE "Use this option to ease packaging of PCSX2 (developer/distribution option)")
 option(DISABLE_CHEATS_ZIP "Disable including the cheats_ws.zip file")
 option(DISABLE_PCSX2_WRAPPER "Disable including the PCSX2-linux.sh file")
 option(XDG_STD "Use XDG standard path instead of the standard PCSX2 path")
-option(EXTRA_PLUGINS "Build various 'extra' plugins")
 option(SDL2_API "Use SDL2 on spu2x and onepad (experimental/wxWidget mustn't be built with SDL1.2 support")
 option(WX28_API "Force wxWidget 2.8 lib (deprecated)")
 option(GTK3_API "Use GTK3 api (experimental/wxWidget must be built with GTK3 support)")
diff --git a/cmake/SearchForStuff.cmake b/cmake/SearchForStuff.cmake
index 62d41b0..0143b26 100644
--- a/cmake/SearchForStuff.cmake
+++ b/cmake/SearchForStuff.cmake
@@ -65,10 +65,14 @@ find_package(ZLIB)
 include(FindLibc)
 
 ## Only needed by the extra plugins
-if(EXTRA_PLUGINS)
+if(BUILD_CDVDISO)
     find_package(BZip2)
+endif()
+if(BUILD_ZEROGS OR BUILD_ZZOGL-PG)
     include(FindCg)
     include(FindGlew)
+endif()
+if(BUILD_ZZOGL-PG)
     find_package(JPEG)
 endif()
 
diff --git a/cmake/SelectPcsx2Plugins.cmake b/cmake/SelectPcsx2Plugins.cmake
index 5dd07e4..cc6155f 100644
--- a/cmake/SelectPcsx2Plugins.cmake
+++ b/cmake/SelectPcsx2Plugins.cmake
@@ -56,20 +56,18 @@ endif()
 #           -aio
 #---------------------------------------
 # Common dependancy
-if(wxWidgets_FOUND AND ZLIB_FOUND AND common_libs AND NOT (Linux AND NOT AIO_FOUND))
-    set(pcsx2_core TRUE)
-elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/pcsx2")
-    set(pcsx2_core FALSE)
-else()
-    set(pcsx2_core FALSE)
-    message(STATUS "Skip build of pcsx2 core: miss some dependencies")
-    message(STATUS "${msg_dep_pcsx2}")
-endif()
-# Linux need also gtk2
-if(UNIX AND pcsx2_core AND NOT GTKn_FOUND)
-    set(pcsx2_core FALSE)
-    message(STATUS "Skip build of pcsx2 core: miss some dependencies")
-    message(STATUS "${msg_dep_pcsx2}")
+if(BUILD_CORE)
+    if(wxWidgets_FOUND AND ZLIB_FOUND AND common_libs AND NOT (Linux AND NOT AIO_FOUND) AND EXISTS "${CMAKE_SOURCE_DIR}/pcsx2")
+        set(pcsx2_core TRUE)
+    else()
+        set(pcsx2_core FALSE)
+        message(FATAL_ERROR "PCSX2 core miss some dependencies: ${msg_dep_pcsx2}")
+    endif()
+    # Linux need also gtk2
+    if(UNIX AND pcsx2_core AND NOT GTKn_FOUND)
+        set(pcsx2_core FALSE)
+        message(FATAL_ERROR "PCSX2 core miss some dependencies: ${msg_dep_pcsx2}")
+    endif()
 endif()
 
 
@@ -84,8 +82,12 @@ endif()
 #---------------------------------------
 #			CDVDnull
 #---------------------------------------
-if(GTKn_FOUND)
-    set(CDVDnull TRUE)
+if(BUILD_CDVDNULL)
+    if(GTKn_FOUND)
+        set(CDVDnull TRUE)
+    else()
+        message(FATAL_ERROR "CDVDnull miss GTK dependency")
+    endif()
 endif()
 #---------------------------------------
 
@@ -95,46 +97,55 @@ endif()
 # requires: -BZip2
 #           -gtk2 (linux)
 #---------------------------------------
-if(EXTRA_PLUGINS)
-    if(BZIP2_FOUND AND GTKn_FOUND)
+if(BUILD_CDVDISO)
+    if(BZIP2_FOUND AND GTKn_FOUND AND EXISTS "${CMAKE_SOURCE_DIR}/plugins/CDVDiso")
         set(CDVDiso TRUE)
-    elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/CDVDiso")
-        set(CDVDiso FALSE)
     else()
         set(CDVDiso FALSE)
-        message(STATUS "Skip build of CDVDiso: miss some dependencies")
-        message(STATUS "${msg_dep_cdvdiso}")
+        message(FATAL_ERROR "CDVDiso miss some dependencies: ${msg_dep_cdvdiso}")
     endif()
 endif()
 
 #---------------------------------------
 #			CDVDlinuz
 #---------------------------------------
-if(EXTRA_PLUGINS)
+if(BUILD_CDVDLINUZ)
     set(CDVDlinuz TRUE)
 endif()
 
 #---------------------------------------
 #			dev9null
 #---------------------------------------
-if(GTKn_FOUND)
-    set(dev9null TRUE)
+if(BUILD_DEV9NULL)
+    if(GTKn_FOUND)
+        set(dev9null TRUE)
+    else()
+        message(FATAL_ERROR "dev9null miss GTK dependency")
+    endif()
 endif()
 #---------------------------------------
 
 #---------------------------------------
 #			FWnull
 #---------------------------------------
-if(GTKn_FOUND)
-    set(FWnull TRUE)
+if(BUILD_FWNULL)
+    if(GTKn_FOUND)
+        set(FWnull TRUE)
+    else()
+        message(FATAL_ERROR "fwnull miss GTK dependency")
+    endif()
 endif()
 #---------------------------------------
 
 #---------------------------------------
 #			GSnull
 #---------------------------------------
-if(GTKn_FOUND AND EXTRA_PLUGINS)
-    set(GSnull TRUE)
+if(BUILD_GSNULL)
+    if(GTKn_FOUND)
+        set(GSnull TRUE)
+    else()
+        message(FATAL_ERROR "GSnull miss GTK dependency")
+    endif()
 endif()
 #---------------------------------------
 
@@ -144,14 +155,13 @@ endif()
 # requires: -OpenGL
 #			-X11
 #---------------------------------------
-if(OPENGL_FOUND AND X11_FOUND AND GTKn_FOUND AND PNG_FOUND AND (EGL_FOUND OR NOT EGL_API))
-    set(GSdx TRUE)
-elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/GSdx")
-    set(GSdx FALSE)
-else()
-    set(GSdx FALSE)
-    message(STATUS "Skip build of GSdx: miss some dependencies")
-    message(STATUS "${msg_dep_gsdx}")
+if(BUILD_GSDX)
+    if(OPENGL_FOUND AND X11_FOUND AND GTKn_FOUND AND PNG_FOUND AND (EGL_FOUND OR NOT EGL_API) AND EXISTS "${CMAKE_SOURCE_DIR}/plugins/GSdx")
+        set(GSdx TRUE)
+    else()
+        set(GSdx FALSE)
+        message(FATAL_ERROR "GSdx miss some dependencies: ${msg_dep_gsdx}")
+    endif()
 endif()
 #---------------------------------------
 
@@ -163,15 +173,12 @@ endif()
 #			-X11
 #			-CG
 #---------------------------------------
-if(EXTRA_PLUGINS)
-    if(GLEW_FOUND AND OPENGL_FOUND AND X11_FOUND AND CG_FOUND)
+if(BUILD_ZEROGS)
+    if(GLEW_FOUND AND OPENGL_FOUND AND X11_FOUND AND CG_FOUND AND EXISTS "${CMAKE_SOURCE_DIR}/plugins/zerogs")
         set(zerogs TRUE)
-    elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/zerogs")
-        set(zerogs FALSE)
     else()
         set(zerogs FALSE)
-        message(STATUS "Skip build of zerogs: miss some dependencies")
-        message(STATUS "${msg_dep_zerogs}")
+        message(FATAL_ERROR "zerogs miss some dependencies: ${msg_dep_zerogs}")
     endif()
 endif()
 #---------------------------------------
@@ -186,15 +193,12 @@ endif()
 #			-JPEG
 #           -common_libs
 #---------------------------------------
-if(EXTRA_PLUGINS)
-    if((GLEW_FOUND AND OPENGL_FOUND AND X11_FOUND AND JPEG_FOUND AND common_libs AND GTKn_FOUND) AND (CG_FOUND OR GLSL_API))
+if(BUILD_ZZOGL-PG)
+    if((GLEW_FOUND AND OPENGL_FOUND AND X11_FOUND AND JPEG_FOUND AND common_libs AND GTKn_FOUND) AND (CG_FOUND OR GLSL_API) AND EXISTS "${CMAKE_SOURCE_DIR}/plugins/zzogl-pg")
         set(zzogl TRUE)
-    elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/zzogl-pg")
-        set(zzogl FALSE)
     else()
         set(zzogl FALSE)
-        message(STATUS "Skip build of zzogl: miss some dependencies")
-        message(STATUS "${msg_dep_zzogl}")
+        message(FATAL_ERROR "zzogl miss some dependencies: ${msg_dep_zzogl}")
     endif()
 endif()
 #---------------------------------------
@@ -202,8 +206,12 @@ endif()
 #---------------------------------------
 #			PadNull
 #---------------------------------------
-if(GTKn_FOUND AND EXTRA_PLUGINS)
-    set(PadNull TRUE)
+if(BUILD_PADNULL)
+    if(GTKn_FOUND)
+        set(PadNull TRUE)
+    else()
+        message(FATAL_ERROR "PadNull miss GTK dependency")
+    endif()
 endif()
 #---------------------------------------
 
@@ -211,8 +219,12 @@ endif()
 #			LilyPad
 # requires: -X11
 #---------------------------------------
-if(GTKn_FOUND AND X11_FOUND)
-    set(LilyPad TRUE)
+if(BUILD_LILYPAD)
+    if(GTKn_FOUND AND X11_FOUND)
+        set(LilyPad TRUE)
+    else()
+        message(FATAL_ERROR "LilyPad miss GTK or X11 dependencies")
+    endif()
 endif()
 #---------------------------------------
 
@@ -222,22 +234,25 @@ endif()
 # requires: -SDL
 #			-X11
 #---------------------------------------
-if(SDLn_FOUND AND X11_FOUND)
-	set(onepad TRUE)
-elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/onepad")
-	set(onepad FALSE)
-else()
-	set(onepad FALSE)
-    message(STATUS "Skip build of onepad: miss some dependencies")
-    message(STATUS "${msg_dep_onepad}")
+if(BUILD_ONEPAD)
+    if(SDLn_FOUND AND X11_FOUND AND EXISTS "${CMAKE_SOURCE_DIR}/plugins/onepad")
+        set(onepad TRUE)
+    else()
+        set(onepad FALSE)
+        message(FATAL_ERROR "onepad miss some dependencies: ${msg_dep_onepad}")
+    endif()
 endif()
 #---------------------------------------
 
 #---------------------------------------
 #			SPU2null
 #---------------------------------------
-if(GTKn_FOUND AND EXTRA_PLUGINS)
-    set(SPU2null TRUE)
+if(BUILD_SPU2NULL)
+    if(GTKn_FOUND)
+        set(SPU2null TRUE)
+    else()
+        message(FATAL_ERROR "SPU2null miss GTK dependency")
+    endif()
 endif()
 #---------------------------------------
 
@@ -250,14 +265,13 @@ endif()
 #           -SDL
 #           -common_libs
 #---------------------------------------
-if(ALSA_FOUND AND PORTAUDIO_FOUND AND SOUNDTOUCH_FOUND AND SDLn_FOUND AND common_libs)
-	set(spu2-x TRUE)
-elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/spu2-x")
-	set(spu2-x FALSE)
-else()
-	set(spu2-x FALSE)
-    message(STATUS "Skip build of spu2-x: miss some dependencies")
-    message(STATUS "${msg_dep_spu2x}")
+if(BUILD_SPU2-X)
+    if(ALSA_FOUND AND PORTAUDIO_FOUND AND SOUNDTOUCH_FOUND AND SDLn_FOUND AND common_libs AND EXISTS "${CMAKE_SOURCE_DIR}/plugins/spu2-x")
+        set(spu2-x TRUE)
+    else()
+        set(spu2-x FALSE)
+        message(FATAL_ERROR "spu2-x miss some dependencies: ${msg_dep_spu2x}")
+    endif()
 endif()
 #---------------------------------------
 
@@ -268,18 +282,13 @@ endif()
 #			-ALSA
 #			-PortAudio
 #---------------------------------------
-if(EXTRA_PLUGINS)
-    if(EXISTS "${CMAKE_SOURCE_DIR}/plugins/zerospu2" AND SOUNDTOUCH_FOUND AND ALSA_FOUND)
+if(BUILD_ZEROSPU2)
+    if(EXISTS "${CMAKE_SOURCE_DIR}/plugins/zerospu2" AND SOUNDTOUCH_FOUND AND ALSA_FOUND AND EXISTS "${CMAKE_SOURCE_DIR}/plugins/zerospu2")
         set(zerospu2 TRUE)
-        # Comment the next line, if you want to compile zerospu2
-        set(zerospu2 FALSE)
         message(STATUS "Don't build zerospu2. It is super-seeded by spu2x")
-    elseif(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/zerospu2")
-        set(zerospu2 FALSE)
     else()
         set(zerospu2 FALSE)
-        message(STATUS "Skip build of zerospu2: miss some dependencies")
-        message(STATUS "${msg_dep_zerospu2}")
+        message(FATAL_ERROR "zerospu2 miss some dependencies: ${msg_dep_zerospu2}")
     endif()
 endif()
 #---------------------------------------
@@ -287,8 +296,12 @@ endif()
 #---------------------------------------
 #			USBnull
 #---------------------------------------
-if(GTKn_FOUND)
-    set(USBnull TRUE)
+if(BUILD_USBNULL)
+    if(GTKn_FOUND)
+        set(USBnull TRUE)
+    else()
+        message(FATAL_ERROR "USBnull miss GTK dependency")
+    endif()
 endif()
 #---------------------------------------
 
-- 
2.4.6

